if (! whatis ok_diff_script >/dev/null >[2=1]) {
    echo 'You must load $GS_SPEC/bin/test-fns before loading $GS_SPEC/bin/gs-spec' >[1=2]
    exit 1
}
if not true

fn test_non_existent_file {
    ok_grep_errors '-- non-existent source file --' 'no-such-file.gs: Could not load' test_gsi_impl no-such-file.gs
}

fn test_empty_file {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- empty source file --' 'empty-file.gs:1:1: Undefined' test_gsi_impl empty-file.gs
}

fn test_comment {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- single-line comment --' 'single-line-comment.gs:1:1: Undefined' test_gsi_impl single-line-comment.gs
}

fn test_number {
    TEST_DIR=$GS_SPEC ok_diff '-- numeric literal --' test_gsi_impl numeric-literal.gs
}

fn test_qq_literal {
    TEST_DIR=$GS_SPEC ok_diff '-- qq literals --' test_gsi_impl qq-literal.gs
}

fn test_empty_structure_literal {
    TEST_DIR=$GS_SPEC ok_diff '-- empty structure literals --' test_gsi_impl empty-structure-literal.gs
}

fn test_unbound_variable {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- variable not in scope --' 'foo not in scope' test_gsi_impl unbound-variable.gs
}

fn test_function_variable {
    TEST_DIR=$GS_SPEC ok_diff '-- function variable --' test_gsi_impl function-variable.gsi.gs
}

fn test_undefined_variable {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- undefined variable --' 'undefined.gs:1:1: Undefined' test_gsi_impl undefined.gs
}

fn test_where_clause {
    TEST_DIR=$GS_SPEC ok_diff '-- where clause --' test_gsi_impl where-clause.gs
}

fn test_function_application {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- function application --' 'function-application.gs:1:1: Undefined' test_gsi_impl function-application.gs
}

fn test_infix_operator {
    TEST_DIR=$GS_SPEC ok_diff '-- infix operator --' test_gsi_impl infix-operator.gs
}

fn test_infix_with_explicit {
    TEST_DIR=$GS_SPEC ok_diff '-- infix operator with explicit argument --' test_gsi_impl infix-operator-explicit.gs
}

fn test_function_literal {
    TEST_DIR=$GS_SPEC ok_diff '-- function literal --' test_gsi_impl function-literal.gs
}

fn test_value_function {
    TEST_DIR=$GS_SPEC ok_diff '-- value function --' test_gsi_impl value-function.gs
}

fn test_parameter_shadows_global_variable {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- parameter shadows global variable --' 'parameter-shadows.gs:1:12: gsmain is already in scope' test_gsi_impl parameter-shadows.gs
}

fn test_parameter_shadows_parameter {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- parameter shadows parameter --' 'parameter-shadows-parameter.gs:1:13: x is already in scope' test_gsi_impl parameter-shadows-parameter.gs
}

fn test_variable_function_body {
    TEST_DIR=$GS_SPEC ok_diff '-- variable in function literal --' test_gsi_impl variable-function-body.gs
}

fn test_parameter_function_body {
    TEST_DIR=$GS_SPEC ok_diff '-- use parameter in function literal --' test_gsi_impl parameter-function-body.gs
}

fn test_analyze_undefined {
    TEST_DIR=$GS_SPEC ok_grep_errors '-- analyze undefined --' 'analyze-undefined.gs:1:9: Undefined' test_gsi_impl analyze-undefined.gs
}

fn test_discard_pattern {
    TEST_DIR=$GS_SPEC ok_diff '-- discard patterns --' test_gsi_impl discard-patterns.gs
}

fn test_discard_pattern_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- discard patterns --' test_gsi_impl discard-patterns-hsgs-syntax.gs
}

fn test_variable_pattern_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- variable patterns --' test_gsi_impl variable-patterns-hsgs-syntax.gs
}

fn test_view_pattern {
    TEST_DIR=$GS_SPEC ok_diff '-- view patterns --' test_gsi_impl view-patterns.gs
}

fn test_view_pattern_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- view patterns --' test_gsi_impl view-patterns-hsgs-syntax.gs
}

fn test_view_pattern_arg {
    TEST_DIR=$GS_SPEC ok_diff '-- view patterns with arguments --' test_gsi_impl view-patterns-arg.gs
}

fn test_view_pattern_arg_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- view patterns with arguments --' test_gsi_impl view-patterns-arg-hsgs-syntax.gs
}

fn test_view_pattern_operator_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- operator view patterns --' test_gsi_impl view-patterns-operator-hsgs-syntax.gs
}

fn test_expression_application_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- expression applications --' test_gsi_impl application-expression.gs
}

fn test_case_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- analyze expressions --' test_gsi_impl analyze-expression.gs
}

fn test_for_variable {
    TEST_DIR=$GS_SPEC ok_diff '-- for expressions --' test_gsi_impl variable-for.gs
}

fn test_lexical_variable_hsgs_syntax {
    TEST_DIR=$GS_SPEC ok_diff '-- case expressions where the pattern-bound variables are used --' test_gsi_impl lexical-variable.gs
}

fn test_record_literal_field {
    TEST_DIR=$GS_SPEC ok_diff '-- Record literals with fields --' test_gsi_impl record-literal-field.gs
}
